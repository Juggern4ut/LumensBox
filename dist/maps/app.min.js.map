{"version":3,"sources":["main.js","_lightbox.js"],"names":["window","addEventListener","basicLightbox","uncloseableLightbox","animatedLightbox","draggableLightbox","callbackLightbox","stackedLightbox","basicTrigger","document","getElementById","Lightbox","setTitle","setContent","onclick","open","uncloseableTrigger","closeable","closeButton","createElement","close","innerHTML","animationsTrigger","animationsLightbox","openAnimation","closeAnimation","draggableTrigger","draggable","callbackTrigger","animationDuration","opened","stackedTrigger","secondLightbox","options","_classCallCheck","this","setDefaultSettings","updateSettings","setupDomElements","setEscapeKeyToCloseLightbox","clickOutsideToClose","_this","container","classList","add","style","concat","additionalClasses","length","forEach","className","inner","closeHandler","title","cursor","WebkitUserSelect","MozUserSelect","msUserSelect","userSelect","data","noCloseHandler","append","appendingElement","_this2","noCloseByEscape","e","keyCode","_this3","target","_this4","isDragging","currentTop","currentLeft","initialDragX","pageX","initialDragY","pageY","querySelector","top","left","parseInt","keepInBounds","boundsOffset","puffer","returnValue","wentAbove","wentBelow","wentLeft","wentRight","offsetTop","tmp","Math","abs","offsetHeight","innerHeight","bottom","diff","minTop","getComputedStyle","getPropertyValue","offsetLeft","offsetWidth","innerWidth","right","minLeft","closed","destroyed","key","console","warn","hasOwnProperty","_typeof","Element","HTMLDocument","suboptions","subkey","_this5","el","_this6","resetPosition","overflow","setTimeout","remove","_this7"],"mappings":"AAAAA,OAAOC,iBAAiB,OAAQ,WAC9BC,gBACAC,sBACAC,mBACAC,oBACAC,mBACAC,oBAGF,IAAML,cAAgB,WACpB,IAAMM,EAAeC,SAASC,eAAe,SAC7CV,OAAOE,cAAgB,IAAIS,SAC3BX,OAAOE,cAAcU,SAAS,kBAC9BZ,OAAOE,cAAcW,WAAW,CAC9B,0DACA,4GACA,wKAEFL,EAAaM,QAAU,WAAA,OAAMd,OAAOE,cAAca,SAG9CZ,oBAAsB,WAC1B,IAAMa,EAAqBP,SAASC,eAAe,eACnDV,OAAOG,oBAAsB,IAAIQ,SAAS,CACxCM,WAAW,IAGb,IAAMC,EAAcT,SAASU,cAAc,UAC3CD,EAAYJ,QAAU,WAAA,OAAMd,OAAOG,oBAAoBiB,SACvDF,EAAYG,UAAY,QAExBrB,OAAOG,oBAAoBS,SAAS,wBACpCZ,OAAOG,oBAAoBU,WAAW,CACpC,8EACAK,IAEFF,EAAmBF,QAAU,WAAA,OAAMd,OAAOG,oBAAoBY,SAG1DX,iBAAmB,WACvB,IAAMkB,EAAoBb,SAASC,eAAe,cAClDV,OAAOuB,mBAAqB,IAAIZ,SAAS,CACvCa,cAAe,QACfC,eAAgB,aAElBzB,OAAOuB,mBAAmBX,SAAS,qBACnCZ,OAAOuB,mBAAmBV,WAAW,CACnC,oEACA,wFAEFS,EAAkBR,QAAU,WAAA,OAAMd,OAAOuB,mBAAmBR,SAGxDV,kBAAoB,WACxB,IAAMqB,EAAmBjB,SAASC,eAAe,aACjDV,OAAOK,kBAAoB,IAAIM,SAAS,CACtCgB,WAAW,IAEb3B,OAAOK,kBAAkBO,SAAS,sBAClCZ,OAAOK,kBAAkBQ,WAAW,CAClC,sEACA,gFACA,0GAEFa,EAAiBZ,QAAU,WAAA,OAAMd,OAAOK,kBAAkBU,SAGtDT,iBAAmB,WACvB,IAAMsB,EAAkBnB,SAASC,eAAe,YAChDV,OAAOM,iBAAmB,IAAIK,SAAS,CACrCkB,kBAAmB,KACnBT,MAAO,WAAA,OAAMpB,OAAOM,iBAAiBO,WAAW,mBAChDE,KAAM,WAAA,OAAMf,OAAOM,iBAAiBO,WAAW,uBAC/CiB,OAAQ,WAAA,OACN9B,OAAOM,iBAAiBO,WACtB,oEAGNb,OAAOM,iBAAiBM,SAAS,qBACjCgB,EAAgBd,QAAU,WAAA,OAAMd,OAAOM,iBAAiBS,SAGpDR,gBAAkB,WACtB,IAAMwB,EAAiBtB,SAASC,eAAe,WAC/CV,OAAOO,gBAAkB,IAAII,SAC7BX,OAAOgC,eAAiB,IAAIrB,SAAS,CAAEgB,WAAW,IAC/Cf,SAAS,4BACTC,WAAW,uBAEd,IAAMK,EAAcT,SAASU,cAAc,UAC3CD,EAAYJ,QAAU,WAAA,OAAMd,OAAOgC,eAAejB,QAClDG,EAAYG,UAAY,UAExBrB,OAAOO,gBAAgBK,SAAS,oBAChCZ,OAAOO,gBAAgBM,WAAW,CAChC,mCACAK,IAEFa,EAAejB,QAAU,WAAA,OAAMd,OAAOO,gBAAgBQ,ooBC5FlDJ,oBAwBJ,SAAAA,EAAYsB,GAYV,OAZmBC,gBAAAC,KAAAxB,GACnBsB,EAAUA,GAAoB,GAE9BE,KAAKC,qBACLD,KAAKE,eAAeJ,GAEpBE,KAAKG,mBAELH,KAAKI,8BACLJ,KAAK9B,oBACL8B,KAAKK,sBAEEL,qEAQU,IAAAM,EAAAN,KACjBA,KAAKO,UAAYjC,SAASU,cAAc,OACxCgB,KAAKO,UAAUC,UAAUC,IAAI,YAC7BT,KAAKO,UAAUG,MAAMhB,kBAArB,GAAAiB,OAA4CX,KAAKF,QAAQJ,kBAAzD,MAGEM,KAAKF,QAAQc,mBACbZ,KAAKF,QAAQc,kBAAkBC,SAEe,iBAAnCb,KAAKF,QAAQc,kBACtBZ,KAAKO,UAAUC,UAAUC,IAAIT,KAAKF,QAAQc,mBAE1CZ,KAAKF,QAAQc,kBAAkBE,QAAQ,SAAAC,GACrCT,EAAKC,UAAUC,UAAUC,IAAIM,MAKnCf,KAAKgB,MAAQ1C,SAASU,cAAc,OACpCgB,KAAKgB,MAAMR,UAAUC,IAAI,mBACzBT,KAAKgB,MAAMR,UAAUC,IAArB,oBAAAE,OAA6CX,KAAKF,QAAQT,gBAC1DW,KAAKgB,MAAMN,MAAMhB,kBAAjB,GAAAiB,OAAwCX,KAAKF,QAAQJ,kBAArD,MAEAM,KAAKiB,aAAe3C,SAASU,cAAc,OAC3CgB,KAAKiB,aAAaT,UAAUC,IAAI,2BAEhCT,KAAKkB,MAAQ5C,SAASU,cAAc,KACpCgB,KAAKkB,MAAMV,UAAUC,IAAI,mBAErBT,KAAKF,QAAQN,YACfQ,KAAKkB,MAAMR,MAAMS,OAAS,OAC1BnB,KAAKkB,MAAMR,MAAMU,iBAAmB,OACpCpB,KAAKkB,MAAMR,MAAMW,cAAgB,OACjCrB,KAAKkB,MAAMR,MAAMY,aAAe,OAChCtB,KAAKkB,MAAMR,MAAMa,WAAa,QAGhCvB,KAAKiB,aAAatC,QAAU,WAC1B2B,EAAKrB,SAGPe,KAAKwB,KAAOlD,SAASU,cAAc,OACnCgB,KAAKwB,KAAKhB,UAAUC,IAAI,mBAEnBT,KAAKF,QAAQ2B,gBAAkBzB,KAAKF,QAAQhB,WAC/CkB,KAAKgB,MAAMU,OAAO1B,KAAKiB,cAGzBjB,KAAKgB,MAAMU,OAAO1B,KAAKkB,OACvBlB,KAAKgB,MAAMU,OAAO1B,KAAKwB,MACvBxB,KAAKO,UAAUmB,OAAO1B,KAAKgB,OAC3BhB,KAAKF,QAAQ6B,iBAAiBD,OAAO1B,KAAKO,iEAUd,IAAAqB,EAAA5B,KAC5B,QAAIA,KAAKF,QAAQ+B,kBAAoB7B,KAAKF,QAAQhB,aAClDR,SAASR,iBAAiB,UAAW,SAAAgE,GACjB,KAAdA,EAAEC,SACJH,EAAK3C,WAGF,iDASa,IAAA+C,EAAAhC,KACpB,SAAKA,KAAKF,QAAQO,sBAAwBL,KAAKF,QAAQhB,aAEvDkB,KAAKO,UAAUzC,iBAAiB,QAAS,SAAAgE,GACnCA,EAAEG,SAAWD,EAAKzB,WACpByB,EAAK/C,WAGF,+CAUW,IAAAiD,EAAAlC,KAClB,QAAKA,KAAKF,QAAQN,YAElBQ,KAAKmC,YAAa,EAClBnC,KAAKoC,WAAa,EAClBpC,KAAKqC,YAAc,EAEnBrC,KAAKkB,MAAMpD,iBAAiB,YAAa,SAAAgE,GACvCI,EAAKC,YAAa,EAClBD,EAAKI,aAAeR,EAAES,MACtBL,EAAKM,aAAeV,EAAEW,QAGxBnE,SAASoE,cAAc,QAAQ5E,iBAAiB,YAAa,SAAAgE,GAC3D,IAAKI,EAAKC,WAAY,OAAO,EAE7B,IAAMQ,EAAMb,EAAEW,MAAQP,EAAKM,aAAeN,EAAKE,WACzCQ,EAAOd,EAAES,MAAQL,EAAKI,aAAeJ,EAAKG,YAEhDH,EAAKlB,MAAMN,MAAMiC,IAAjB,GAAAhC,OAA0BgC,EAA1B,MACAT,EAAKlB,MAAMN,MAAMkC,KAAjB,GAAAjC,OAA2BiC,EAA3B,QAGFtE,SAASoE,cAAc,QAAQ5E,iBAAiB,UAAW,WACzD,IAAKoE,EAAKC,WAAY,OAAO,EAC7BD,EAAKC,YAAa,EAClBD,EAAKE,WAAaS,SAASX,EAAKlB,MAAMN,MAAMiC,KAC5CT,EAAKG,YAAcQ,SAASX,EAAKlB,MAAMN,MAAMkC,MAE7CV,EAAKE,WAAaF,EAAKE,WAAaF,EAAKE,WAAa,EACtDF,EAAKG,YAAcH,EAAKG,YAAcH,EAAKG,YAAc,EAErDH,EAAKpC,QAAQgD,cACfZ,EAAKY,aAAaZ,EAAKpC,QAAQiD,iBAI5B,2CASP,QAAI/C,KAAKF,QAAQN,YACfQ,KAAKgB,MAAMN,MAAMiC,IAAM,EACvB3C,KAAKgB,MAAMN,MAAMkC,KAAO,EACxB5C,KAAKqC,YAAc,IACnBrC,KAAKoC,WAAa,yCAeTY,GACX,IAAIC,EAAc,CAChBC,WAAW,EACXC,WAAW,EACXC,UAAU,EACVC,WAAW,GAIb,GAAIrD,KAAKgB,MAAMsC,UAAY,EAAG,CAC5B,IAAMC,EAAMvD,KAAKoC,WAAaoB,KAAKC,IAAIzD,KAAKgB,MAAMsC,WAAaN,EAC/DhD,KAAKgB,MAAMN,MAAMiC,IAAjB,GAAAhC,OAA0B4C,EAA1B,MACAvD,KAAKoC,WAAamB,EAClBN,EAAYC,WAAY,OAIrB,GACHlD,KAAKgB,MAAMsC,UAAYtD,KAAKgB,MAAM0C,aAClC7F,OAAO8F,YACP,CACA,IAAMC,EAAS5D,KAAKgB,MAAMsC,UAAYtD,KAAKgB,MAAM0C,aAAeV,EAC1Da,EAAOhG,OAAO8F,YAAcC,EAC5BL,EAAMvD,KAAKoC,WAAayB,EAC9B7D,KAAKgB,MAAMN,MAAMiC,IAAjB,GAAAhC,OAA0B4C,EAA1B,MACAvD,KAAKoC,WAAamB,EAElB,IAIMO,GAAiC,GAJrBjB,SAChBhF,OAAOkG,iBAAiB/D,KAAKgB,MAAO,MAAMgD,iBAAiB,eAGjChB,GACxBhD,KAAKoC,WAAa0B,IACpB9D,KAAKoC,WAAa0B,EAClB9D,KAAKgB,MAAMN,MAAMiC,IAAjB,GAAAhC,OAA0BmD,EAA1B,OAGFb,EAAYE,WAAY,EAI1B,GAAInD,KAAKgB,MAAMiD,WAAa,EAAG,CAC7B,IAAMV,EAAMvD,KAAKqC,YAAcmB,KAAKC,IAAIzD,KAAKgB,MAAMiD,YAAcjB,EACjEhD,KAAKgB,MAAMN,MAAMkC,KAAjB,GAAAjC,OAA2B4C,EAA3B,MACAvD,KAAKqC,YAAckB,EACnBN,EAAYG,UAAW,OAIpB,GACHpD,KAAKgB,MAAMiD,WAAajE,KAAKgB,MAAMkD,YACnCrG,OAAOsG,WACP,CACA,IAAMC,EAAQpE,KAAKgB,MAAMiD,WAAajE,KAAKgB,MAAMkD,YAAclB,EACzDa,EAAOhG,OAAOsG,WAAaC,EAC3Bb,EAAMvD,KAAKqC,YAAcwB,EAC/B7D,KAAKgB,MAAMN,MAAMkC,KAAjB,GAAAjC,OAA2B4C,EAA3B,MACAvD,KAAKqC,YAAckB,EAEnB,IAMMc,GAAmC,GANtBxB,SACjBhF,OACGkG,iBAAiB/D,KAAKgB,MAAO,MAC7BgD,iBAAiB,gBAGQhB,GAC1BhD,KAAKqC,YAAcgC,IACrBrE,KAAKqC,YAAcgC,EACnBrE,KAAKgB,MAAMN,MAAMkC,KAAjB,GAAAjC,OAA2B0D,EAA3B,OAGFpB,EAAYI,WAAY,EAG1B,OAAOJ,+CAUPjD,KAAKF,QAAU,GACfE,KAAKF,QAAQc,kBAAoB,GACjCZ,KAAKF,QAAQhB,WAAY,EACzBkB,KAAKF,QAAQN,WAAY,EACzBQ,KAAKF,QAAQ2B,gBAAiB,EAC9BzB,KAAKF,QAAQ+B,iBAAkB,EAC/B7B,KAAKF,QAAQT,cAAgB,WAC7BW,KAAKF,QAAQR,eAAiB,SAC9BU,KAAKF,QAAQO,qBAAsB,EACnCL,KAAKF,QAAQJ,kBAAoB,IACjCM,KAAKF,QAAQiD,aAAe,GAC5B/C,KAAKF,QAAQgD,cAAe,EAC5B9C,KAAKF,QAAQ6B,iBAAmBrD,SAASoE,cAAc,QACvD1C,KAAKF,QAAQlB,KAAO,aACpBoB,KAAKF,QAAQH,OAAS,aACtBK,KAAKF,QAAQb,MAAQ,aACrBe,KAAKF,QAAQwE,OAAS,aACtBtE,KAAKF,QAAQyE,UAAY,oDASZzE,GACb,IAAK,IAAI0E,KAAO1E,EAOd,GANY,qBAAR0E,GAA+B1E,EAAQ6B,kBACzC8C,QAAQC,KACN,uGAIA5E,EAAQ6E,eAAeH,GACzB,GAA4B,WAAxBI,QAAO9E,EAAQ0E,IACjB,GACE1E,EAAQ0E,aAAgBK,SACxB/E,EAAQ0E,aAAgBM,aAExB9E,KAAKF,QAAQ0E,GAAO1E,EAAQ0E,OACvB,CACL,IAAIO,EAAajF,EAAQ0E,GACzB,IAAK,IAAIQ,KAAUD,EACbA,EAAWJ,eAAeK,KAC5BhF,KAAKF,QAAQ0E,GAAKQ,GAAUD,EAAWC,SAK7ChF,KAAKF,QAAQ0E,GAAO1E,EAAQ0E,sCAazBhD,GAAM,IAAAyD,EAAAjF,KAkBf,OAjBAA,KAAKwB,KAAKtC,UAAY,GAEF,WAAhB0F,QAAOpD,GACLA,EAAKX,OACPW,EAAKV,QAAQ,SAAAoE,GACO,iBAAPA,EACTD,EAAKzD,KAAKtC,WAAagG,EAEvBD,EAAKzD,KAAKE,OAAOwD,KAIrBlF,KAAKwB,KAAKE,OAAOF,GAGnBxB,KAAKwB,KAAKtC,UAAYsC,EAEjBxB,sCASAkB,GAGP,OAFAA,EAAQA,GAAgB,GACxBlB,KAAKkB,MAAMhC,UAAYgC,EAChBlB,oCASF,IAAAmF,EAAAnF,KAUL,OATAA,KAAKF,QAAQlB,OACboB,KAAKoF,gBACLpF,KAAKO,UAAUC,UAAUC,IAAI,kBAC7BT,KAAKO,UAAUC,UAAUC,IAAI,qBAC7BnC,SAASoE,cAAc,cAAchC,MAAM2E,SAAW,SACtDC,WAAW,WACTH,EAAK5E,UAAUC,UAAU+E,OAAO,qBAChCJ,EAAKrF,QAAQH,UACZK,KAAKF,QAAQJ,mBACTM,qCASD,IAAAwF,EAAAxF,KAaN,OAZAA,KAAKF,QAAQb,QACbe,KAAKgB,MAAMR,UAAUC,IAArB,oBAAAE,OAA6CX,KAAKF,QAAQR,iBAC1DU,KAAKO,UAAUC,UAAUC,IAAI,qBAC7B6E,WAAW,WACTE,EAAKjF,UAAUC,UAAU+E,OAAO,kBAChCC,EAAKjF,UAAUC,UAAU+E,OAAO,qBAChCjH,SAASoE,cAAc,cAAchC,MAAM2E,SAAW,OACtDG,EAAKxE,MAAMR,UAAU+E,OAArB,oBAAA5E,OACsB6E,EAAK1F,QAAQR,iBAEnCkG,EAAK1F,QAAQwE,UACZtE,KAAKF,QAAQJ,mBACTM,uCAUPA,KAAKO,UAAUgF,SACfvF,KAAKgB,MAAMuE,SACXvF,KAAKiB,aAAasE,SAClBvF,KAAKkB,MAAMqE,SACXvF,KAAKwB,KAAK+D,SACVvF,KAAKF,QAAQyE","file":"../js/app.min.js","sourcesContent":["window.addEventListener(\"load\", () => {\r\n  basicLightbox();\r\n  uncloseableLightbox();\r\n  animatedLightbox();\r\n  draggableLightbox();\r\n  callbackLightbox();\r\n  stackedLightbox();\r\n});\r\n\r\nconst basicLightbox = () => {\r\n  const basicTrigger = document.getElementById(\"basic\");\r\n  window.basicLightbox = new Lightbox();\r\n  window.basicLightbox.setTitle(\"Basic Lightbox\");\r\n  window.basicLightbox.setContent([\r\n    \"<p>This is a basic Lightbox with no options passed.</p>\",\r\n    \"<p>It can contain everything you can place in HTML such as Iframes, Images, Videos or just plain Text</p>\",\r\n    \"<p>The lightbox can be closed by clicking outside, pressing the escape key or clicking the X in the top right. All those options can be individually configured</p>\"\r\n  ]);\r\n  basicTrigger.onclick = () => window.basicLightbox.open();\r\n};\r\n\r\nconst uncloseableLightbox = () => {\r\n  const uncloseableTrigger = document.getElementById(\"uncloseable\");\r\n  window.uncloseableLightbox = new Lightbox({\r\n    closeable: false\r\n  });\r\n\r\n  const closeButton = document.createElement(\"button\");\r\n  closeButton.onclick = () => window.uncloseableLightbox.close();\r\n  closeButton.innerHTML = \"Close\";\r\n\r\n  window.uncloseableLightbox.setTitle(\"Uncloseable Lightbox\");\r\n  window.uncloseableLightbox.setContent([\r\n    \"<p>This box cannot be closed, except with this custom made close button</p>\",\r\n    closeButton\r\n  ]);\r\n  uncloseableTrigger.onclick = () => window.uncloseableLightbox.open();\r\n};\r\n\r\nconst animatedLightbox = () => {\r\n  const animationsTrigger = document.getElementById(\"animations\");\r\n  window.animationsLightbox = new Lightbox({\r\n    openAnimation: \"jelly\",\r\n    closeAnimation: \"collapse\"\r\n  });\r\n  window.animationsLightbox.setTitle(\"Animated Lightbox\");\r\n  window.animationsLightbox.setContent([\r\n    \"<p>This Lightbox has different opening and closing animations</p>\",\r\n    \"<p>It uses 'jelly' to open and 'collapse' to close, but there are several more.</p>\"\r\n  ]);\r\n  animationsTrigger.onclick = () => window.animationsLightbox.open();\r\n};\r\n\r\nconst draggableLightbox = () => {\r\n  const draggableTrigger = document.getElementById(\"draggable\");\r\n  window.draggableLightbox = new Lightbox({\r\n    draggable: true\r\n  });\r\n  window.draggableLightbox.setTitle(\"Draggable Lightbox\");\r\n  window.draggableLightbox.setContent([\r\n    \"<p>This Lightbox can be dragged around by grabbing the titlebar</p>\",\r\n    \"<p>If you drag it outside of the pagebounds and let go, it will snap back</p>\",\r\n    \"<p>With this option enabled, the user can no longer select the text in the title of the lightbox.</p>\"\r\n  ]);\r\n  draggableTrigger.onclick = () => window.draggableLightbox.open();\r\n};\r\n\r\nconst callbackLightbox = () => {\r\n  const callbackTrigger = document.getElementById(\"callback\");\r\n  window.callbackLightbox = new Lightbox({\r\n    animationDuration: 1500,\r\n    close: () => window.callbackLightbox.setContent(\"<p>Bye Bye</p>\"),\r\n    open: () => window.callbackLightbox.setContent(\"<p>Hello there</p>\"),\r\n    opened: () =>\r\n      window.callbackLightbox.setContent(\r\n        \"<p>This Lightbox will use callbacks to change the content</p>\"\r\n      )\r\n  });\r\n  window.callbackLightbox.setTitle(\"Callback Lightbox\");\r\n  callbackTrigger.onclick = () => window.callbackLightbox.open();\r\n};\r\n\r\nconst stackedLightbox = () => {\r\n  const stackedTrigger = document.getElementById(\"stacked\");\r\n  window.stackedLightbox = new Lightbox();\r\n  window.secondLightbox = new Lightbox({ draggable: true })\r\n    .setTitle(\"Another stacked lightbox\")\r\n    .setContent(\"<p>There we go!</p>\");\r\n\r\n  const closeButton = document.createElement(\"button\");\r\n  closeButton.onclick = () => window.secondLightbox.open();\r\n  closeButton.innerHTML = \"We will\";\r\n\r\n  window.stackedLightbox.setTitle(\"Stacked lightbox\");\r\n  window.stackedLightbox.setContent([\r\n    \"<p>We need to go deeper Leo!</p>\",\r\n    closeButton\r\n  ]);\r\n  stackedTrigger.onclick = () => window.stackedLightbox.open();\r\n};\r\n","/**\r\n * Represents a lightbox that can be used to display information\r\n * to the user by being displayed on the top layer of the page\r\n *\r\n * @class Lightbox\r\n */\r\nclass Lightbox {\r\n  /**\r\n   * Sets up the basic structure and DOM of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @param {Object} options The options to configure the lightbox\r\n   *  @param {(String|String[])} options.additionalClasses Additional classes that will be added to the lightbox\r\n   *  @param {Boolean} options.closeable If set to false, all triggers to close the lightbox will be automatically overwritten\r\n   *  @param {Boolean} options.draggable If set to true, the lightbox can be dragged by grabbing the titlebar\r\n   *  @param {Boolean} options.noCloseHandler If set to true, the lightbox will have no close button in the top right\r\n   *  @param {Boolean} options.noCloseByEscape If set to true, the lightbox can't be closed by pressing escape\r\n   *  @param {Boolean} options.clickOutsideToClose If set to true, the lightbox can be closed by clicking outside of it\r\n   *  @param {String} options.openAnimation The animation that should be used to open the lightbox. Use: grow, fadein, jelly or fadedown\r\n   *  @param {String} options.closeAnimation The animation that should be used to close the lightbox. Use: shrink, fadeout or fadeup\r\n   *  @param {Number} options.animationDuration The duration of the animation in milliseconds\r\n   *  @param {Number} options.boundsOffset If the lightbox is dragged outside of the page it will snap back with this margin\r\n   *  @param {Boolean} options.keepInBounds If set to true, the lightbox will snap back into bounds if dragged outside\r\n   *  @param {HTMLElement} options.appendingElement The Lightbox will be appended to this element. The body is strongly recommended here, as it is the default anyways.\r\n   *  @param {Function} options.open Callback that gets called when the lightbox starts opening\r\n   *  @param {Function} options.opened Callback that gets called when the lightbox finished opening\r\n   *  @param {Function} options.close Callback that gets called when the lightbox starts closing\r\n   *  @param {Function} options.closed Callback that gets called when the lightbox finished closing\r\n   *  @param {Function} options.destroyed Callback that gets called when the lightbox is destroyed\r\n   * @returns {Lightbox} The created lightbox object.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    this.setDefaultSettings();\r\n    this.updateSettings(options);\r\n\r\n    this.setupDomElements();\r\n\r\n    this.setEscapeKeyToCloseLightbox();\r\n    this.draggableLightbox();\r\n    this.clickOutsideToClose();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will create the DOM-Elements and place them at the end of the body\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  setupDomElements() {\r\n    this.container = document.createElement(\"div\");\r\n    this.container.classList.add(\"lightbox\");\r\n    this.container.style.animationDuration = `${this.options.animationDuration}ms`;\r\n\r\n    if (\r\n      this.options.additionalClasses &&\r\n      this.options.additionalClasses.length\r\n    ) {\r\n      if (typeof this.options.additionalClasses === \"string\") {\r\n        this.container.classList.add(this.options.additionalClasses);\r\n      } else {\r\n        this.options.additionalClasses.forEach(className => {\r\n          this.container.classList.add(className);\r\n        });\r\n      }\r\n    }\r\n\r\n    this.inner = document.createElement(\"div\");\r\n    this.inner.classList.add(\"lightbox__inner\");\r\n    this.inner.classList.add(`lightbox__inner--${this.options.openAnimation}`);\r\n    this.inner.style.animationDuration = `${this.options.animationDuration}ms`;\r\n\r\n    this.closeHandler = document.createElement(\"div\");\r\n    this.closeHandler.classList.add(\"lightbox__close-handler\");\r\n\r\n    this.title = document.createElement(\"p\");\r\n    this.title.classList.add(\"lightbox__title\");\r\n\r\n    if (this.options.draggable) {\r\n      this.title.style.cursor = \"move\";\r\n      this.title.style.WebkitUserSelect = \"none\";\r\n      this.title.style.MozUserSelect = \"none\";\r\n      this.title.style.msUserSelect = \"none\";\r\n      this.title.style.userSelect = \"none\";\r\n    }\r\n\r\n    this.closeHandler.onclick = () => {\r\n      this.close();\r\n    };\r\n\r\n    this.data = document.createElement(\"div\");\r\n    this.data.classList.add(\"lightbox__data\");\r\n\r\n    if (!this.options.noCloseHandler && this.options.closeable) {\r\n      this.inner.append(this.closeHandler);\r\n    }\r\n\r\n    this.inner.append(this.title);\r\n    this.inner.append(this.data);\r\n    this.container.append(this.inner);\r\n    this.options.appendingElement.append(this.container);\r\n  }\r\n\r\n  /**\r\n   * Adds an eventlistener to the document to\r\n   * allow the user to close the lightbox\r\n   * by pressing the escape key\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlistener has been set, false otherwise\r\n   */\r\n  setEscapeKeyToCloseLightbox() {\r\n    if (this.options.noCloseByEscape || !this.options.closeable) return false;\r\n    document.addEventListener(\"keydown\", e => {\r\n      if (e.keyCode === 27) {\r\n        this.close();\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets a clicklistener to close the lightbox by\r\n   * clicking outside of it.\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlistener has been set, false otherwise\r\n   */\r\n  clickOutsideToClose() {\r\n    if (!this.options.clickOutsideToClose || !this.options.closeable)\r\n      return false;\r\n    this.container.addEventListener(\"click\", e => {\r\n      if (e.target === this.container) {\r\n        this.close();\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Will add several eventlisteners that allow\r\n   * the user to drag the lightbox by dragging\r\n   * the title bar.\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlisteners have been set, false otherwise\r\n   */\r\n  draggableLightbox() {\r\n    if (!this.options.draggable) return false;\r\n\r\n    this.isDragging = false;\r\n    this.currentTop = 0;\r\n    this.currentLeft = 0;\r\n\r\n    this.title.addEventListener(\"mousedown\", e => {\r\n      this.isDragging = true;\r\n      this.initialDragX = e.pageX;\r\n      this.initialDragY = e.pageY;\r\n    });\r\n\r\n    document.querySelector(\"body\").addEventListener(\"mousemove\", e => {\r\n      if (!this.isDragging) return false;\r\n\r\n      const top = e.pageY - this.initialDragY + this.currentTop;\r\n      const left = e.pageX - this.initialDragX + this.currentLeft;\r\n\r\n      this.inner.style.top = `${top}px`;\r\n      this.inner.style.left = `${left}px`;\r\n    });\r\n\r\n    document.querySelector(\"body\").addEventListener(\"mouseup\", () => {\r\n      if (!this.isDragging) return false;\r\n      this.isDragging = false;\r\n      this.currentTop = parseInt(this.inner.style.top);\r\n      this.currentLeft = parseInt(this.inner.style.left);\r\n\r\n      this.currentTop = this.currentTop ? this.currentTop : 0;\r\n      this.currentLeft = this.currentLeft ? this.currentLeft : 0;\r\n\r\n      if (this.options.keepInBounds) {\r\n        this.keepInBounds(this.options.boundsOffset);\r\n      }\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Will reset the draggin position of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if position has been reset, false otherwise\r\n   */\r\n  resetPosition() {\r\n    if (this.options.draggable) {\r\n      this.inner.style.top = 0;\r\n      this.inner.style.left = 0;\r\n      this.currentLeft = 0;\r\n      this.currentTop = 0;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will check if the Lightbox is outside of the window\r\n   * and force it back inside. This way, the user cannot\r\n   * drag the handler outsite of the bounds.\r\n   * @author {Lukas Meier}\r\n   * @param {Number} puffer If the lightbox is out of bounds, it will have this number as a margin to the bounds.\r\n   * @returns {Object} Containing which bounds have been crossed\r\n   */\r\n  keepInBounds(puffer) {\r\n    let returnValue = {\r\n      wentAbove: false,\r\n      wentBelow: false,\r\n      wentLeft: false,\r\n      wentRight: false\r\n    };\r\n\r\n    //Prevent the box from going above the page bounds\r\n    if (this.inner.offsetTop < 0) {\r\n      const tmp = this.currentTop + Math.abs(this.inner.offsetTop) + puffer;\r\n      this.inner.style.top = `${tmp}px`;\r\n      this.currentTop = tmp;\r\n      returnValue.wentAbove = true;\r\n    }\r\n\r\n    //Prevent the box from going below the page bounds\r\n    else if (\r\n      this.inner.offsetTop + this.inner.offsetHeight >\r\n      window.innerHeight\r\n    ) {\r\n      const bottom = this.inner.offsetTop + this.inner.offsetHeight + puffer;\r\n      const diff = window.innerHeight - bottom;\r\n      const tmp = this.currentTop + diff;\r\n      this.inner.style.top = `${tmp}px`;\r\n      this.currentTop = tmp;\r\n\r\n      const marginTop = parseInt(\r\n        window.getComputedStyle(this.inner, null).getPropertyValue(\"margin-top\")\r\n      );\r\n\r\n      const minTop = (marginTop - puffer) * -1;\r\n      if (this.currentTop < minTop) {\r\n        this.currentTop = minTop;\r\n        this.inner.style.top = `${minTop}px`;\r\n      }\r\n\r\n      returnValue.wentBelow = true;\r\n    }\r\n\r\n    //Prevent the box from going left of the page bounds\r\n    if (this.inner.offsetLeft < 0) {\r\n      const tmp = this.currentLeft + Math.abs(this.inner.offsetLeft) + puffer;\r\n      this.inner.style.left = `${tmp}px`;\r\n      this.currentLeft = tmp;\r\n      returnValue.wentLeft = true;\r\n    }\r\n\r\n    //Prevent the box from going right of the page bounds\r\n    else if (\r\n      this.inner.offsetLeft + this.inner.offsetWidth >\r\n      window.innerWidth\r\n    ) {\r\n      const right = this.inner.offsetLeft + this.inner.offsetWidth + puffer;\r\n      const diff = window.innerWidth - right;\r\n      const tmp = this.currentLeft + diff;\r\n      this.inner.style.left = `${tmp}px`;\r\n      this.currentLeft = tmp;\r\n\r\n      const marginLeft = parseInt(\r\n        window\r\n          .getComputedStyle(this.inner, null)\r\n          .getPropertyValue(\"margin-left\")\r\n      );\r\n\r\n      const minLeft = (marginLeft - puffer) * -1;\r\n      if (this.currentLeft < minLeft) {\r\n        this.currentLeft = minLeft;\r\n        this.inner.style.left = `${minLeft}px`;\r\n      }\r\n\r\n      returnValue.wentRight = true;\r\n    }\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Sets the settings to the default values. This is called\r\n   * on initialisation and can be used to reset all settings.\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  setDefaultSettings() {\r\n    this.options = {};\r\n    this.options.additionalClasses = [];\r\n    this.options.closeable = true;\r\n    this.options.draggable = false;\r\n    this.options.noCloseHandler = false;\r\n    this.options.noCloseByEscape = false;\r\n    this.options.openAnimation = \"fadedown\";\r\n    this.options.closeAnimation = \"fadeup\";\r\n    this.options.clickOutsideToClose = true;\r\n    this.options.animationDuration = 500;\r\n    this.options.boundsOffset = 20;\r\n    this.options.keepInBounds = true;\r\n    this.options.appendingElement = document.querySelector(\"body\");\r\n    this.options.open = () => {};\r\n    this.options.opened = () => {};\r\n    this.options.close = () => {};\r\n    this.options.closed = () => {};\r\n    this.options.destroyed = () => {};\r\n  }\r\n\r\n  /**\r\n   * Overrites default settings with custom ones.\r\n   * @author {Lukas Meier}\r\n   * @param {Object} options - Optional settings object.\r\n   * @returns {void}\r\n   */\r\n  updateSettings(options) {\r\n    for (let key in options) {\r\n      if (key === \"appendingElement\" && !options.appendingElement) {\r\n        console.warn(\r\n          \"The Element to append the lightbox to, could not be found. It will be appended to the body instead.\"\r\n        );\r\n      }\r\n\r\n      if (options.hasOwnProperty(key)) {\r\n        if (typeof options[key] === \"object\") {\r\n          if (\r\n            options[key] instanceof Element ||\r\n            options[key] instanceof HTMLDocument\r\n          ) {\r\n            this.options[key] = options[key];\r\n          } else {\r\n            let suboptions = options[key];\r\n            for (let subkey in suboptions) {\r\n              if (suboptions.hasOwnProperty(subkey)) {\r\n                this.options[key][subkey] = suboptions[subkey];\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          this.options[key] = options[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will set the content of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @param {(String|Object)} data The data to display. Can be a String, a HTMLObject or an Array of either.\r\n   * @param {String} title The title displayed in the top left of the lightbox\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  setContent(data) {\r\n    this.data.innerHTML = \"\";\r\n\r\n    if (typeof data === \"object\") {\r\n      if (data.length) {\r\n        data.forEach(el => {\r\n          if (typeof el === \"string\") {\r\n            this.data.innerHTML += el;\r\n          } else {\r\n            this.data.append(el);\r\n          }\r\n        });\r\n      } else {\r\n        this.data.append(data);\r\n      }\r\n    } else {\r\n      this.data.innerHTML = data;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will set the Title of the Lightbox\r\n   * @param {String} title The title to set in the lightbox\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  setTitle(title) {\r\n    title = title ? title : \"\";\r\n    this.title.innerHTML = title;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gives the lightbox the --open modifier which\r\n   * is used by CSS to make the lightbox visible\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  open() {\r\n    this.options.open();\r\n    this.resetPosition();\r\n    this.container.classList.add(\"lightbox--open\");\r\n    this.container.classList.add(\"lightbox--opening\");\r\n    document.querySelector(\"body, html\").style.overflow = \"hidden\";\r\n    setTimeout(() => {\r\n      this.container.classList.remove(\"lightbox--opening\");\r\n      this.options.opened();\r\n    }, this.options.animationDuration);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the --open modifier from the lightbox\r\n   * is used by CSS to make the lightbox visible\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  close() {\r\n    this.options.close();\r\n    this.inner.classList.add(`lightbox__inner--${this.options.closeAnimation}`);\r\n    this.container.classList.add(\"lightbox--closing\");\r\n    setTimeout(() => {\r\n      this.container.classList.remove(\"lightbox--open\");\r\n      this.container.classList.remove(\"lightbox--closing\");\r\n      document.querySelector(\"body, html\").style.overflow = \"auto\";\r\n      this.inner.classList.remove(\r\n        `lightbox__inner--${this.options.closeAnimation}`\r\n      );\r\n      this.options.closed();\r\n    }, this.options.animationDuration);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will remove all traces of the lightbox from the DOM\r\n   * and calls the destroyed callback.\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  destroy() {\r\n    this.container.remove();\r\n    this.inner.remove();\r\n    this.closeHandler.remove();\r\n    this.title.remove();\r\n    this.data.remove();\r\n    this.options.destroyed();\r\n  }\r\n}\r\n"]}