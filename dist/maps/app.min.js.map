{"version":3,"sources":["main.js","_lightbox.js"],"names":["window","addEventListener","trigger","document","getElementById","lightbox","LumensBox","animationDuration","openAnimation","closeAnimation","setTitle","text","createElement","innerHTML","button","onclick","close","setContent","open","options","_this","this","_classCallCheck","setDefaultSettings","updateSettings","container","classList","add","additionalClasses","length","forEach","className","inner","concat","style","closeHandler","title","draggable","cursor","data","noCloseHandler","append","querySelector","noCloseByEscape","setEscapeKeyToCloseLightbox","draggableLightbox","_this2","e","keyCode","_this3","isDragging","currentTop","currentLeft","initialDragX","pageX","initialDragY","pageY","top","left","parseInt","keepInBounds","_this4","resetPosition","overflow","setTimeout","opened","_this5","remove","closed","puffer","returnValue","wentAbove","wentBelow","wentLeft","wentRight","offsetTop","tmp","Math","abs","offsetHeight","innerHeight","bottom","diff","minTop","getComputedStyle","getPropertyValue","offsetLeft","offsetWidth","innerWidth","right","minLeft","_this6","_typeof","el","key","hasOwnProperty","suboptions","subkey"],"mappings":"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","file":"../js/app.min.js","sourcesContent":["window.addEventListener(\"load\", () => {\r\n  const trigger = document.getElementById(\"trigger\");\r\n  if (trigger) {\r\n    \r\n    const lightbox = new LumensBox({\r\n      animationDuration: 500,\r\n      openAnimation: \"jelly\",\r\n      closeAnimation: \"shrink\"\r\n    });\r\n\r\n    lightbox.setTitle(\"Lightbox Title\");\r\n\r\n    const text = document.createElement(\"p\");\r\n    text.innerHTML =\r\n      \"You can close the box by pressing 'ESC', clicking the X in the top right or press the close button below.\";\r\n\r\n    const button = document.createElement(\"button\");\r\n    button.innerHTML = \"Close\";\r\n    button.onclick = () => lightbox.close();\r\n\r\n    trigger.onclick = () => {\r\n      lightbox.setContent([text, button]);\r\n      lightbox.open();\r\n    };\r\n  }\r\n});\r\n","/**\r\n * Represents a lightbox\r\n */\r\nclass LumensBox {\r\n  /**\r\n   * Sets up the basic structure and DOM of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @param {Object} options The options to configure the lightbox\r\n   * @returns {void}\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    this.setDefaultSettings();\r\n    this.updateSettings(options);\r\n\r\n    this.container = document.createElement(\"div\");\r\n    this.container.classList.add(\"lightbox\");\r\n\r\n    if (options.additionalClasses && options.additionalClasses.length) {\r\n      options.additionalClasses.forEach(className => {\r\n        this.container.classList.add(className);\r\n      });\r\n    }\r\n\r\n    this.inner = document.createElement(\"div\");\r\n    this.inner.classList.add(\"lightbox__inner\");\r\n    this.inner.classList.add(`lightbox__inner--${this.options.openAnimation}`);\r\n    this.inner.style.animationDuration = this.options.animationDuration + \"ms\";\r\n\r\n    this.closeHandler = document.createElement(\"div\");\r\n    this.closeHandler.classList.add(\"lightbox__close-handler\");\r\n\r\n    this.title = document.createElement(\"p\");\r\n    this.title.classList.add(\"lightbox__title\");\r\n\r\n    if (this.options.draggable) {\r\n      this.title.style.cursor = \"move\";\r\n    }\r\n\r\n    this.closeHandler.onclick = () => {\r\n      this.close();\r\n    };\r\n\r\n    this.data = document.createElement(\"div\");\r\n    this.data.classList.add(\"lightbox__data\");\r\n\r\n    if (!this.options.noCloseHandler) {\r\n      this.inner.append(this.closeHandler);\r\n    }\r\n    this.inner.append(this.title);\r\n    this.inner.append(this.data);\r\n    this.container.append(this.inner);\r\n    document.querySelector(\"body\").append(this.container);\r\n    if (!this.options.noCloseByEscape) {\r\n      this.setEscapeKeyToCloseLightbox();\r\n    }\r\n    if (this.options.draggable) {\r\n      this.draggableLightbox();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds an eventlistener to the document to\r\n   * allow the user to close the lightbox\r\n   * by pressing the escape key\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  setEscapeKeyToCloseLightbox() {\r\n    document.addEventListener(\"keydown\", e => {\r\n      if (e.keyCode === 27) {\r\n        this.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Will add several eventlisteners that allow\r\n   * the user to drag the lightbox by dragging\r\n   * the title bar.\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  draggableLightbox() {\r\n    this.isDragging = false;\r\n    this.currentTop = 0;\r\n    this.currentLeft = 0;\r\n\r\n    this.title.addEventListener(\"mousedown\", e => {\r\n      this.isDragging = true;\r\n      this.initialDragX = e.pageX;\r\n      this.initialDragY = e.pageY;\r\n    });\r\n\r\n    document.querySelector(\"body\").addEventListener(\"mousemove\", e => {\r\n      if (!this.isDragging) return false;\r\n\r\n      const top = e.pageY - this.initialDragY + this.currentTop;\r\n      const left = e.pageX - this.initialDragX + this.currentLeft;\r\n\r\n      this.inner.style.top = `${top}px`;\r\n      this.inner.style.left = `${left}px`;\r\n    });\r\n\r\n    document.querySelector(\"body\").addEventListener(\"mouseup\", () => {\r\n      if (!this.isDragging) return false;\r\n      this.isDragging = false;\r\n      this.currentTop = parseInt(this.inner.style.top);\r\n      this.currentLeft = parseInt(this.inner.style.left);\r\n\r\n      this.currentTop = this.currentTop ? this.currentTop : 0;\r\n      this.currentLeft = this.currentLeft ? this.currentLeft : 0;\r\n\r\n      this.keepInBounds(20);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Will reset the draggin position of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  resetPosition() {\r\n    if (this.options.draggable) {\r\n      this.inner.style.top = 0;\r\n      this.inner.style.left = 0;\r\n      this.currentLeft = 0;\r\n      this.currentTop = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gives the lightbox the --open modifier which\r\n   * is used by CSS to make the lightbox visible\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  open() {\r\n    this.options.open();\r\n    this.resetPosition();\r\n    this.container.classList.add(\"lightbox--open\");\r\n    document.querySelector(\"body, html\").style.overflow = \"hidden\";\r\n    setTimeout(() => {\r\n      this.options.opened();\r\n    }, this.options.animationDuration);\r\n  }\r\n\r\n  /**\r\n   * Removes the --open modifier from the lightbox\r\n   * is used by CSS to make the lightbox visible\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  close() {\r\n    this.options.close();\r\n    this.inner.classList.add(`lightbox__inner--${this.options.closeAnimation}`);\r\n    setTimeout(() => {\r\n      this.container.classList.remove(\"lightbox--open\");\r\n      document.querySelector(\"body, html\").style.overflow = \"auto\";\r\n      this.inner.classList.remove(\r\n        `lightbox__inner--${this.options.closeAnimation}`\r\n      );\r\n      this.options.closed();\r\n    }, this.options.animationDuration);\r\n  }\r\n\r\n  /**\r\n   * Will check if the Lightbox is outside of the window\r\n   * and force it back inside. This way, the user cannot\r\n   * drag the handler outsite of the bounds.\r\n   * @author {Lukas Meier}\r\n   * @param {Number} puffer If the lightbox is out of bounds, it will have this number as a margin to the bounds.\r\n   * @returns {Object} Containing which bounds have been crossed\r\n   */\r\n  keepInBounds(puffer) {\r\n    let returnValue = {\r\n      wentAbove: false,\r\n      wentBelow: false,\r\n      wentLeft: false,\r\n      wentRight: false\r\n    };\r\n\r\n    //Prevent the box from going above the page bounds\r\n    if (this.inner.offsetTop < 0) {\r\n      const tmp = this.currentTop + Math.abs(this.inner.offsetTop) + puffer;\r\n      this.inner.style.top = tmp + \"px\";\r\n      this.currentTop = tmp;\r\n      returnValue.wentAbove = true;\r\n    }\r\n\r\n    //Prevent the box from going below the page bounds\r\n    else if (\r\n      this.inner.offsetTop + this.inner.offsetHeight >\r\n      window.innerHeight\r\n    ) {\r\n      const bottom = this.inner.offsetTop + this.inner.offsetHeight + puffer;\r\n      const diff = window.innerHeight - bottom;\r\n      const tmp = this.currentTop + diff;\r\n      this.inner.style.top = tmp + \"px\";\r\n      this.currentTop = tmp;\r\n\r\n      const marginTop = parseInt(\r\n        window.getComputedStyle(this.inner, null).getPropertyValue(\"margin-top\")\r\n      );\r\n\r\n      const minTop = (marginTop - puffer) * -1;\r\n      if (this.currentTop < minTop) {\r\n        this.currentTop = minTop;\r\n        this.inner.style.top = minTop + \"px\";\r\n      }\r\n\r\n      returnValue.wentBelow = true;\r\n    }\r\n\r\n    //Prevent the box from going left of the page bounds\r\n    if (this.inner.offsetLeft < 0) {\r\n      const tmp = this.currentLeft + Math.abs(this.inner.offsetLeft) + puffer;\r\n      this.inner.style.left = tmp + \"px\";\r\n      this.currentLeft = tmp;\r\n      returnValue.wentLeft = true;\r\n    }\r\n\r\n    //Prevent the box from going right of the page bounds\r\n    else if (\r\n      this.inner.offsetLeft + this.inner.offsetWidth >\r\n      window.innerWidth\r\n    ) {\r\n      const right = this.inner.offsetLeft + this.inner.offsetWidth + puffer;\r\n      const diff = window.innerWidth - right;\r\n      const tmp = this.currentLeft + diff;\r\n      this.inner.style.left = tmp + \"px\";\r\n      this.currentLeft = tmp;\r\n\r\n      const marginLeft = parseInt(\r\n        window\r\n          .getComputedStyle(this.inner, null)\r\n          .getPropertyValue(\"margin-left\")\r\n      );\r\n\r\n      const minLeft = (marginLeft - puffer) * -1;\r\n      if (this.currentLeft < minLeft) {\r\n        this.currentLeft = minLeft;\r\n        this.inner.style.left = minLeft + \"px\";\r\n      }\r\n\r\n      returnValue.wentRight = true;\r\n    }\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Will set the content of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @param {String | Object} data The data to display. Can be a String, a HTMLObject or an Array of either.\r\n   * @param {String} title The title displayed in the top left of the lightbox\r\n   * @returns {void}\r\n   */\r\n  setContent(data) {\r\n    this.data.innerHTML = \"\";\r\n\r\n    if (typeof data === \"object\") {\r\n      if (data.length) {\r\n        data.forEach(el => {\r\n          this.data.append(el);\r\n        });\r\n      } else {\r\n        this.data.append(data);\r\n      }\r\n    } else {\r\n      this.data.innerHTML = data;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will set the Title of the Lightbox\r\n   * @param {String} title The title to set in the lightbox\r\n   * @author {Lukas Meier}\r\n   */\r\n  setTitle(title) {\r\n    title = title ? title : \"\";\r\n    this.title.innerHTML = title;\r\n  }\r\n\r\n  /**\r\n   * Sets the settings to the default values. This is called\r\n   * on initialisation and can be used to reset all settings.\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  setDefaultSettings() {\r\n    this.options = {};\r\n    this.options.additionalClasses = [];\r\n    this.options.draggable = true;\r\n    this.options.noCloseHandler = false;\r\n    this.options.noCloseByEscape = false;\r\n    this.options.openAnimation = \"fadein\";\r\n    this.options.closeAnimation = \"fadeout\";\r\n    this.options.animationDuration = 500;\r\n    this.options.open = () => {};\r\n    this.options.opened = () => {};\r\n    this.options.close = () => {};\r\n    this.options.closed = () => {};\r\n  }\r\n\r\n  /**\r\n   * Overrites default settings with custom ones.\r\n   * @author {Lukas Meier}\r\n   * @param {Object} options - Optional settings object.\r\n   * @returns {void}\r\n   */\r\n  updateSettings(options) {\r\n    for (var key in options) {\r\n      if (options.hasOwnProperty(key)) {\r\n        if (typeof options[key] === \"object\") {\r\n          var suboptions = options[key];\r\n          for (var subkey in suboptions) {\r\n            if (suboptions.hasOwnProperty(subkey)) {\r\n              this.options[key][subkey] = suboptions[subkey];\r\n            }\r\n          }\r\n        } else {\r\n          this.options[key] = options[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}