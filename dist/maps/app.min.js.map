{"version":3,"sources":["main.js","_lightbox.js"],"names":["window","addEventListener","trigger","document","getElementById","lightbox","Lightbox","animationDuration","openAnimation","closeAnimation","setTitle","text","createElement","innerHTML","button","onclick","close","setContent","open","options","_classCallCheck","this","setDefaultSettings","updateSettings","setupDomElements","setEscapeKeyToCloseLightbox","draggableLightbox","clickOutsideToClose","_this","container","classList","add","style","concat","additionalClasses","length","forEach","className","inner","closeHandler","title","draggable","cursor","data","noCloseHandler","closeable","append","appendingElement","_this2","noCloseByEscape","e","keyCode","_this3","target","_this4","isDragging","currentTop","currentLeft","initialDragX","pageX","initialDragY","pageY","querySelector","top","left","parseInt","keepInBounds","boundsOffset","puffer","returnValue","wentAbove","wentBelow","wentLeft","wentRight","offsetTop","tmp","Math","abs","offsetHeight","innerHeight","bottom","diff","minTop","getComputedStyle","getPropertyValue","offsetLeft","offsetWidth","innerWidth","right","minLeft","opened","closed","destroyed","key","console","warn","hasOwnProperty","_typeof","Element","HTMLDocument","suboptions","subkey","_this5","el","_this6","resetPosition","overflow","setTimeout","remove","_this7"],"mappings":"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","file":"../js/app.min.js","sourcesContent":["window.addEventListener(\"load\", () => {\r\n  const trigger = document.getElementById(\"trigger\");\r\n  if (trigger) {\r\n    window.lightbox = new Lightbox({\r\n      animationDuration: 500,\r\n      openAnimation: \"fadedown\", \r\n      closeAnimation: \"shrink\"\r\n    }).setTitle(\"Lightbox Title\");\r\n\r\n    const text = document.createElement(\"p\");\r\n    text.innerHTML =\r\n      \"You can close the box by pressing 'ESC', clicking the X in the top right, press the close button below or click outside of the lightbox\";\r\n\r\n    const button = document.createElement(\"button\");\r\n    button.innerHTML = \"Close\";\r\n    button.onclick = () => lightbox.close();\r\n\r\n    trigger.onclick = () => {\r\n      lightbox.setContent([text, button]);\r\n      lightbox.open();\r\n    };\r\n  }\r\n});\r\n","/**\r\n * Represents a lightbox that can be used to display information\r\n * to the user by being displayed on the top layer of the page\r\n *\r\n * @class Lightbox\r\n */\r\nclass Lightbox {\r\n  /**\r\n   * Sets up the basic structure and DOM of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @param {Object} options The options to configure the lightbox\r\n   *  @param {(String|String[])} options.additionalClasses Additional classes that will be added to the lightbox\r\n   *  @param {Boolean} options.closeable If set to false, all triggers to close the lightbox will be automatically overwritten\r\n   *  @param {Boolean} options.draggable If set to true, the lightbox can be dragged by grabbing the titlebar\r\n   *  @param {Boolean} options.noCloseHandler If set to true, the lightbox will have no close button in the top right\r\n   *  @param {Boolean} options.noCloseByEscape If set to true, the lightbox can't be closed by pressing escape\r\n   *  @param {Boolean} options.clickOutsideToClose If set to true, the lightbox can be closed by clicking outside of it\r\n   *  @param {String} options.openAnimation The animation that should be used to open the lightbox. Use: grow, fadein, jelly or fadedown\r\n   *  @param {String} options.closeAnimation The animation that should be used to close the lightbox. Use: shrink, fadeout or fadeup\r\n   *  @param {Number} options.animationDuration The duration of the animation in milliseconds\r\n   *  @param {Number} options.boundsOffset If the lightbox is dragged outside of the page it will snap back with this margin\r\n   *  @param {Boolean} options.keepInBounds If set to true, the lightbox will snap back into bounds if dragged outside\r\n   *  @param {HTMLElement} options.appendingElement The Lightbox will be appended to this element. The body is strongly recommended here, as it is the default anyways.\r\n   *  @param {Function} options.open Callback that gets called when the lightbox starts opening\r\n   *  @param {Function} options.opened Callback that gets called when the lightbox finished opening\r\n   *  @param {Function} options.close Callback that gets called when the lightbox starts closing\r\n   *  @param {Function} options.closed Callback that gets called when the lightbox finished closing\r\n   *  @param {Function} options.destroyed Callback that gets called when the lightbox is destroyed\r\n   * @returns {Lightbox} The created lightbox object.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    this.setDefaultSettings();\r\n    this.updateSettings(options);\r\n\r\n    this.setupDomElements();\r\n\r\n    this.setEscapeKeyToCloseLightbox();\r\n    this.draggableLightbox();\r\n    this.clickOutsideToClose();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will create the DOM-Elements and place them at the end of the body\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  setupDomElements() {\r\n    this.container = document.createElement(\"div\");\r\n    this.container.classList.add(\"lightbox\");\r\n    this.container.style.animationDuration = `${this.options.animationDuration}ms`;\r\n\r\n    if (\r\n      this.options.additionalClasses &&\r\n      this.options.additionalClasses.length\r\n    ) {\r\n      if (typeof this.options.additionalClasses === \"string\") {\r\n        this.container.classList.add(this.options.additionalClasses);\r\n      } else {\r\n        this.options.additionalClasses.forEach(className => {\r\n          this.container.classList.add(className);\r\n        });\r\n      }\r\n    }\r\n\r\n    this.inner = document.createElement(\"div\");\r\n    this.inner.classList.add(\"lightbox__inner\");\r\n    this.inner.classList.add(`lightbox__inner--${this.options.openAnimation}`);\r\n    this.inner.style.animationDuration = `${this.options.animationDuration}ms`;\r\n\r\n    this.closeHandler = document.createElement(\"div\");\r\n    this.closeHandler.classList.add(\"lightbox__close-handler\");\r\n\r\n    this.title = document.createElement(\"p\");\r\n    this.title.classList.add(\"lightbox__title\");\r\n\r\n    if (this.options.draggable) {\r\n      this.title.style.cursor = \"move\";\r\n    }\r\n\r\n    this.closeHandler.onclick = () => {\r\n      this.close();\r\n    };\r\n\r\n    this.data = document.createElement(\"div\");\r\n    this.data.classList.add(\"lightbox__data\");\r\n\r\n    if (!this.options.noCloseHandler && this.options.closeable) {\r\n      this.inner.append(this.closeHandler);\r\n    }\r\n\r\n    this.inner.append(this.title);\r\n    this.inner.append(this.data);\r\n    this.container.append(this.inner);\r\n    this.options.appendingElement.append(this.container);\r\n  }\r\n\r\n  /**\r\n   * Adds an eventlistener to the document to\r\n   * allow the user to close the lightbox\r\n   * by pressing the escape key\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlistener has been set, false otherwise\r\n   */\r\n  setEscapeKeyToCloseLightbox() {\r\n    if (this.options.noCloseByEscape || !this.options.closeable) return false;\r\n    document.addEventListener(\"keydown\", e => {\r\n      if (e.keyCode === 27) {\r\n        this.close();\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets a clicklistener to close the lightbox by\r\n   * clicking outside of it.\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlistener has been set, false otherwise\r\n   */\r\n  clickOutsideToClose() {\r\n    if (!this.options.clickOutsideToClose || !this.options.closeable)\r\n      return false;\r\n    this.container.addEventListener(\"click\", e => {\r\n      if (e.target === this.container) {\r\n        this.close();\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Will add several eventlisteners that allow\r\n   * the user to drag the lightbox by dragging\r\n   * the title bar.\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlisteners have been set, false otherwise\r\n   */\r\n  draggableLightbox() {\r\n    if (!this.options.draggable) return false;\r\n\r\n    this.isDragging = false;\r\n    this.currentTop = 0;\r\n    this.currentLeft = 0;\r\n\r\n    this.title.addEventListener(\"mousedown\", e => {\r\n      this.isDragging = true;\r\n      this.initialDragX = e.pageX;\r\n      this.initialDragY = e.pageY;\r\n    });\r\n\r\n    document.querySelector(\"body\").addEventListener(\"mousemove\", e => {\r\n      if (!this.isDragging) return false;\r\n\r\n      const top = e.pageY - this.initialDragY + this.currentTop;\r\n      const left = e.pageX - this.initialDragX + this.currentLeft;\r\n\r\n      this.inner.style.top = `${top}px`;\r\n      this.inner.style.left = `${left}px`;\r\n    });\r\n\r\n    document.querySelector(\"body\").addEventListener(\"mouseup\", () => {\r\n      if (!this.isDragging) return false;\r\n      this.isDragging = false;\r\n      this.currentTop = parseInt(this.inner.style.top);\r\n      this.currentLeft = parseInt(this.inner.style.left);\r\n\r\n      this.currentTop = this.currentTop ? this.currentTop : 0;\r\n      this.currentLeft = this.currentLeft ? this.currentLeft : 0;\r\n\r\n      if (this.options.keepInBounds) {\r\n        this.keepInBounds(this.options.boundsOffset);\r\n      }\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Will reset the draggin position of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if position has been reset, false otherwise\r\n   */\r\n  resetPosition() {\r\n    if (this.options.draggable) {\r\n      this.inner.style.top = 0;\r\n      this.inner.style.left = 0;\r\n      this.currentLeft = 0;\r\n      this.currentTop = 0;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will check if the Lightbox is outside of the window\r\n   * and force it back inside. This way, the user cannot\r\n   * drag the handler outsite of the bounds.\r\n   * @author {Lukas Meier}\r\n   * @param {Number} puffer If the lightbox is out of bounds, it will have this number as a margin to the bounds.\r\n   * @returns {Object} Containing which bounds have been crossed\r\n   */\r\n  keepInBounds(puffer) {\r\n    let returnValue = {\r\n      wentAbove: false,\r\n      wentBelow: false,\r\n      wentLeft: false,\r\n      wentRight: false\r\n    };\r\n\r\n    //Prevent the box from going above the page bounds\r\n    if (this.inner.offsetTop < 0) {\r\n      const tmp = this.currentTop + Math.abs(this.inner.offsetTop) + puffer;\r\n      this.inner.style.top = `${tmp}px`;\r\n      this.currentTop = tmp;\r\n      returnValue.wentAbove = true;\r\n    }\r\n\r\n    //Prevent the box from going below the page bounds\r\n    else if (\r\n      this.inner.offsetTop + this.inner.offsetHeight >\r\n      window.innerHeight\r\n    ) {\r\n      const bottom = this.inner.offsetTop + this.inner.offsetHeight + puffer;\r\n      const diff = window.innerHeight - bottom;\r\n      const tmp = this.currentTop + diff;\r\n      this.inner.style.top = `${tmp}px`;\r\n      this.currentTop = tmp;\r\n\r\n      const marginTop = parseInt(\r\n        window.getComputedStyle(this.inner, null).getPropertyValue(\"margin-top\")\r\n      );\r\n\r\n      const minTop = (marginTop - puffer) * -1;\r\n      if (this.currentTop < minTop) {\r\n        this.currentTop = minTop;\r\n        this.inner.style.top = `${minTop}px`;\r\n      }\r\n\r\n      returnValue.wentBelow = true;\r\n    }\r\n\r\n    //Prevent the box from going left of the page bounds\r\n    if (this.inner.offsetLeft < 0) {\r\n      const tmp = this.currentLeft + Math.abs(this.inner.offsetLeft) + puffer;\r\n      this.inner.style.left = `${tmp}px`;\r\n      this.currentLeft = tmp;\r\n      returnValue.wentLeft = true;\r\n    }\r\n\r\n    //Prevent the box from going right of the page bounds\r\n    else if (\r\n      this.inner.offsetLeft + this.inner.offsetWidth >\r\n      window.innerWidth\r\n    ) {\r\n      const right = this.inner.offsetLeft + this.inner.offsetWidth + puffer;\r\n      const diff = window.innerWidth - right;\r\n      const tmp = this.currentLeft + diff;\r\n      this.inner.style.left = `${tmp}px`;\r\n      this.currentLeft = tmp;\r\n\r\n      const marginLeft = parseInt(\r\n        window\r\n          .getComputedStyle(this.inner, null)\r\n          .getPropertyValue(\"margin-left\")\r\n      );\r\n\r\n      const minLeft = (marginLeft - puffer) * -1;\r\n      if (this.currentLeft < minLeft) {\r\n        this.currentLeft = minLeft;\r\n        this.inner.style.left = `${minLeft}px`;\r\n      }\r\n\r\n      returnValue.wentRight = true;\r\n    }\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Sets the settings to the default values. This is called\r\n   * on initialisation and can be used to reset all settings.\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  setDefaultSettings() {\r\n    this.options = {};\r\n    this.options.additionalClasses = [];\r\n    this.options.closeable = true;\r\n    this.options.draggable = true;\r\n    this.options.noCloseHandler = false;\r\n    this.options.noCloseByEscape = false;\r\n    this.options.openAnimation = \"fadedown\";\r\n    this.options.closeAnimation = \"fadeup\";\r\n    this.options.clickOutsideToClose = true;\r\n    this.options.animationDuration = 500;\r\n    this.options.boundsOffset = 20;\r\n    this.options.keepInBounds = true;\r\n    this.options.appendingElement = document.querySelector(\"body\");\r\n    this.options.open = () => {};\r\n    this.options.opened = () => {};\r\n    this.options.close = () => {};\r\n    this.options.closed = () => {};\r\n    this.options.destroyed = () => {};\r\n  }\r\n\r\n  /**\r\n   * Overrites default settings with custom ones.\r\n   * @author {Lukas Meier}\r\n   * @param {Object} options - Optional settings object.\r\n   * @returns {void}\r\n   */\r\n  updateSettings(options) {\r\n    for (let key in options) {\r\n      if (key === \"appendingElement\" && !options.appendingElement) {\r\n        console.warn(\r\n          \"The Element to append the lightbox to, could not be found. It will be appended to the body instead.\"\r\n        );\r\n      }\r\n\r\n      if (options.hasOwnProperty(key)) {\r\n        if (typeof options[key] === \"object\") {\r\n          if (\r\n            options[key] instanceof Element ||\r\n            options[key] instanceof HTMLDocument\r\n          ) {\r\n            this.options[key] = options[key];\r\n          } else {\r\n            let suboptions = options[key];\r\n            for (let subkey in suboptions) {\r\n              if (suboptions.hasOwnProperty(subkey)) {\r\n                this.options[key][subkey] = suboptions[subkey];\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          this.options[key] = options[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will set the content of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @param {(String|Object)} data The data to display. Can be a String, a HTMLObject or an Array of either.\r\n   * @param {String} title The title displayed in the top left of the lightbox\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  setContent(data) {\r\n    this.data.innerHTML = \"\";\r\n\r\n    if (typeof data === \"object\") {\r\n      if (data.length) {\r\n        data.forEach(el => {\r\n          this.data.append(el);\r\n        });\r\n      } else {\r\n        this.data.append(data);\r\n      }\r\n    } else {\r\n      this.data.innerHTML = data;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will set the Title of the Lightbox\r\n   * @param {String} title The title to set in the lightbox\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  setTitle(title) {\r\n    title = title ? title : \"\";\r\n    this.title.innerHTML = title;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gives the lightbox the --open modifier which\r\n   * is used by CSS to make the lightbox visible\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  open() {\r\n    this.options.open();\r\n    this.resetPosition();\r\n    this.container.classList.add(\"lightbox--open\");\r\n    this.container.classList.add(\"lightbox--opening\");\r\n    document.querySelector(\"body, html\").style.overflow = \"hidden\";\r\n    setTimeout(() => {\r\n      this.container.classList.remove(\"lightbox--opening\");\r\n      this.options.opened();\r\n    }, this.options.animationDuration);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the --open modifier from the lightbox\r\n   * is used by CSS to make the lightbox visible\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  close() {\r\n    this.options.close();\r\n    this.inner.classList.add(`lightbox__inner--${this.options.closeAnimation}`);\r\n    this.container.classList.add(\"lightbox--closing\");\r\n    setTimeout(() => {\r\n      this.container.classList.remove(\"lightbox--open\");\r\n      this.container.classList.remove(\"lightbox--closing\");\r\n      document.querySelector(\"body, html\").style.overflow = \"auto\";\r\n      this.inner.classList.remove(\r\n        `lightbox__inner--${this.options.closeAnimation}`\r\n      );\r\n      this.options.closed();\r\n    }, this.options.animationDuration);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will remove all traces of the lightbox from the DOM\r\n   * and calls the destroyed callback.\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  destroy() {\r\n    this.container.remove();\r\n    this.inner.remove();\r\n    this.closeHandler.remove();\r\n    this.title.remove();\r\n    this.data.remove();\r\n    this.options.destroyed();\r\n  }\r\n}\r\n"]}